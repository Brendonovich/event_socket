name: API CD

on:
  push:
    branches:
      - main
    paths-ignore:
      - "web/**"

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
#   IMAGE_NAME: eventsocket-api

jobs:
  # build-prod:
  #   name: Build to GHCR
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/master'
  #   steps:
  #     - name: Pull
  #       uses: actions/checkout@v2
  #       
  #     - name: Setup Docker Layer Caching
  #       uses: satackey/action-docker-layer-caching@v0.0.11
  #       # Ignore the failure of a step and avoid terminating the job.
  #       continue-on-error: true

  #     - name: Build
  #       run: docker build . -t $IMAGE_NAME

  #     - name: Login to GHCR
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

  #     - name: Push to GHCR
  #       id: push
  #       run: |
  #         IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "master" ] && VERSION=latest
  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION
  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION
  #         echo "::set-output name=image-digest::$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE_ID:$VERSION)"

  deploy-prod:
    name: Deploy
    runs-on: ubuntu-latest
    environment:
      name: API Production
      url: "https://api.eventsocket.brendonovich.dev"
    steps:
      - uses: actions/checkout@v2
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
